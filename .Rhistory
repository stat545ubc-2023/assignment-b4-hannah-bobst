test_that("Output produces an error",{
# Create data set in list format for test
data_test2 <- list("the", "and", "therefore", "across", "before")
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test2), "Input data must be a ")
})
test_that("Output produces an error",{
# Create data set in list format for test
data_test2 <- list("the", "and", "therefore", "across", "before")
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test2), "Input data must be a character ")
})
test_that("Output produces an error",{
# Create data set in list format for test
data_test2 <- list("the", "and", "therefore", "across", "before")
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test2), "Input data must be a vector.")
})
#' @title Convert words to modified Pig Latin
#'
#' @description pig_latin_mod takes a vector of character data (one word per observation) and converts each observation to a modified version of Pig Latin.
#'
#' @param data An atomic vector. This vector contains the words to be converted to the modified Pig Latin.
#' @param remove_punctuation A Boolean variable. If TRUE, the function removes all punctuation from the data vector. The default is FALSE.
#' @param lower_case A Boolean variable. If TRUE, the function converts all words to lower case. The default is FALSE.
#' @return An atomic vector with the observations from "data" converted to the modified Pig Latin.
#'
#' @import tidyverse
#' @export
pig_latin_mod <- function(data, remove_punctuation = FALSE, lower_case = FALSE){
# Check if input data is an atomic vector
if(!is.atomic(data)){
# If data isn't a vector, stop function with an error
stop("Input data must be an atomic vector.")
}
# Check if the vector has character data
if(!is.character(data)){
# If the vector doesn't have character data, stop function with an error
stop("Input vector must have character data.")
}
# Check if the vector multiple words (blank space between characters)
if(TRUE %in% str_detect(data, pattern = " ")){
# If multiple words, stop function with an error
stop("Input vector must only have one word per observation.")
}
# Check if remove_punctuation argument is true
if(remove_punctuation == TRUE){
# Remove punctuation from each word
data <- str_remove_all(data, pattern = "[^a-z,A-Z]")
}
# Check if lower_case argument is true
if(lower_case == TRUE){
# Convert all words to lower case
data <- tolower(data)
}
# Function to detect if a letter is a vowel
is_vowel <- function(x) x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
# Function to detect if a letter is a consonant
is_consonant <- function(x) !(x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U"))
# Map each letter in function
map_vec(data, function(x){
# Split current word by letter
data_letters <- str_split(x, "")[[1]]
# Find letter at the end of the current word
end_letter <- str_sub(x, start=-1)
# Find last vowel index for the current word
last_vowel <- detect_index(data_letters, is_vowel, .dir="backward")
# Find last consonant index for the current word
last_con <- detect_index(data_letters, is_consonant, .dir="backward")
# If the last letter is a consonant
if(is_consonant(end_letter) == TRUE){
# Move letters (until last vowel) from the end to the beginning and add "ya" to the beginning
str_c("ya", str_sub(x, start=last_vowel+1), str_sub(x, end=last_vowel))
} else{
# Move letters (until last consonant) from the end to the beginning and add "ya" to beginning
str_c("ya", str_sub(x, start=last_con+1), str_sub(x, end=last_con))
}
})
}
# Print original values
words[1:20]
# Print values converted into the modified Pig Latin
pig_latin_mod(words[1:20])
# Print original value
words[50]
# Print value converted into the modified Pig Latin
pig_latin_mod(words[50])
# Make vector of words
sample_words1 <- c("the", "able", "therefore", "can't", "found.")
# Print original values
sample_words1
# Convert values to modified Pig Latin with punctuation
pig_latin_mod(sample_words1, remove_punctuation = FALSE)
# Convert values to modified Pig Latin without punctuation
pig_latin_mod(sample_words1, remove_punctuation = TRUE)
# Make sample vector of words
sample_words2 <- c("The", "able", "May", "June", "therefore")
# Print original values
sample_words2
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = FALSE)
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = TRUE)
test_that("Output is correct", {
# Check if function output is the same as the manually converted words
expect_equal(pig_latin_mod(words[1:10]), c("yaa", "yaeabl", "yatabou", "yaeabsolut", "yaptacce", "yantaccou", "yaeachiev", "yassacro", "yacta", "yaeactiv"))
})
test_that("Output produces an error",{
# Create data set in list format for test
data_test2 <- list("the", "and", "therefore", "across", "before")
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test2), "Input data must be a vector.")
})
test_that("Output produces an error",{
# Create data set in list format for test
data_test2 <- list("the", "and", "therefore", "across", "before")
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test2), "Input data must be an atomic vector.")
})
grepl("[a-z, A-Z]",c("1", "A", "b"))
# Print original values
words[1:20]
# Print values converted into the modified Pig Latin
pig_latin_mod(words[1:20])
#' @title Convert words to modified Pig Latin
#'
#' @description pig_latin_mod takes a vector of character data (one word per observation) and converts each observation to a modified version of Pig Latin.
#'
#' @param data An atomic vector. This vector contains the words to be converted to the modified Pig Latin.
#' @param remove_punctuation A Boolean variable. If TRUE, the function removes all punctuation from the data vector. The default is FALSE.
#' @param lower_case A Boolean variable. If TRUE, the function converts all words to lower case. The default is FALSE.
#' @return An atomic vector with the observations from "data" converted to the modified Pig Latin.
#'
#' @import tidyverse
#' @export
pig_latin_mod <- function(data, remove_punctuation = FALSE, lower_case = FALSE){
# Check if input data is an atomic vector
if(!is.atomic(data)){
# If data isn't a vector, stop function with an error
stop("Input data must be an atomic vector.")
}
# Check if the vector has character data
if(!is.character(data)){
# If the vector doesn't have character data, stop function with an error
stop("Input vector must have character data.")
}
# Check if the vector has only alphabetical elements
if(FALSE %in% grepl("[a-z, A-Z]", data)){
# If the vector contains non-alphabetical elements, stop function with an error
stop("Input vector must only contain alphabetical elements.")
}
# Check if the vector multiple words (blank space between characters)
if(TRUE %in% str_detect(data, pattern = " ")){
# If multiple words, stop function with an error
stop("Input vector must only have one word per observation.")
}
# Check if remove_punctuation argument is true
if(remove_punctuation == TRUE){
# Remove punctuation from each word
data <- str_remove_all(data, pattern = "[^a-z,A-Z]")
}
# Check if lower_case argument is true
if(lower_case == TRUE){
# Convert all words to lower case
data <- tolower(data)
}
# Function to detect if a letter is a vowel
is_vowel <- function(x) x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
# Function to detect if a letter is a consonant
is_consonant <- function(x) !(x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U"))
# Map each letter in function
map_vec(data, function(x){
# Split current word by letter
data_letters <- str_split(x, "")[[1]]
# Find letter at the end of the current word
end_letter <- str_sub(x, start=-1)
# Find last vowel index for the current word
last_vowel <- detect_index(data_letters, is_vowel, .dir="backward")
# Find last consonant index for the current word
last_con <- detect_index(data_letters, is_consonant, .dir="backward")
# If the last letter is a consonant
if(is_consonant(end_letter) == TRUE){
# Move letters (until last vowel) from the end to the beginning and add "ya" to the beginning
str_c("ya", str_sub(x, start=last_vowel+1), str_sub(x, end=last_vowel))
} else{
# Move letters (until last consonant) from the end to the beginning and add "ya" to beginning
str_c("ya", str_sub(x, start=last_con+1), str_sub(x, end=last_con))
}
})
}
#' @title Convert words to modified Pig Latin
#'
#' @description pig_latin_mod takes a vector of character data (one word per observation) and converts each observation to a modified version of Pig Latin.
#'
#' @param data An atomic vector. This vector contains the words to be converted to the modified Pig Latin.
#' @param remove_punctuation A Boolean variable. If TRUE, the function removes all punctuation from the data vector. The default is FALSE.
#' @param lower_case A Boolean variable. If TRUE, the function converts all words to lower case. The default is FALSE.
#' @return An atomic vector with the observations from "data" converted to the modified Pig Latin.
#'
#' @import tidyverse
#' @export
pig_latin_mod <- function(data, remove_punctuation = FALSE, lower_case = FALSE){
# Check if input data is an atomic vector
if(!is.atomic(data)){
# If data isn't a vector, stop function with an error
stop("Input data must be an atomic vector.")
}
# Check if the vector has character data
if(!is.character(data)){
# If the vector doesn't have character data, stop function with an error
stop("Input vector must have character data.")
}
# Check if the vector has only alphabetical elements
if(FALSE %in% grepl("[a-z, A-Z]", data)){
# If the vector contains non-alphabetical elements, stop function with an error
stop("Input vector must only contain alphabetical elements.")
}
# Check if the vector multiple words (blank space between characters)
if(TRUE %in% str_detect(data, pattern = " ")){
# If multiple words, stop function with an error
stop("Input vector must only have one word per observation.")
}
# Check if remove_punctuation argument is true
if(remove_punctuation == TRUE){
# Remove punctuation from each word
data <- str_remove_all(data, pattern = "[^a-z,A-Z]")
}
# Check if lower_case argument is true
if(lower_case == TRUE){
# Convert all words to lower case
data <- tolower(data)
}
# Function to detect if a letter is a vowel
is_vowel <- function(x) x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
# Function to detect if a letter is a consonant
is_consonant <- function(x) !(x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U"))
# Map each letter in function
map_vec(data, function(x){
# Split current word by letter
data_letters <- str_split(x, "")[[1]]
# Find letter at the end of the current word
end_letter <- str_sub(x, start=-1)
# Find last vowel index for the current word
last_vowel <- detect_index(data_letters, is_vowel, .dir="backward")
# Find last consonant index for the current word
last_con <- detect_index(data_letters, is_consonant, .dir="backward")
# If the last letter is a consonant
if(is_consonant(end_letter) == TRUE){
# Move letters (until last vowel) from the end to the beginning and add "ya" to the beginning
str_c("ya", str_sub(x, start=last_vowel+1), str_sub(x, end=last_vowel))
} else{
# Move letters (until last consonant) from the end to the beginning and add "ya" to beginning
str_c("ya", str_sub(x, start=last_con+1), str_sub(x, end=last_con))
}
})
}
# Print original values
words[1:20]
# Print values converted into the modified Pig Latin
pig_latin_mod(words[1:20])
# Print original value
words[50]
# Print value converted into the modified Pig Latin
pig_latin_mod(words[50])
# Make vector of words
sample_words1 <- c("the", "able", "therefore", "can't", "found.")
# Print original values
sample_words1
# Convert values to modified Pig Latin with punctuation
pig_latin_mod(sample_words1, remove_punctuation = FALSE)
# Convert values to modified Pig Latin without punctuation
pig_latin_mod(sample_words1, remove_punctuation = TRUE)
# Make sample vector of words
sample_words2 <- c("The", "able", "May", "June", "therefore")
# Print original values
sample_words2
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = FALSE)
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = TRUE)
# Print original value
words[50]
# Print value converted into the modified Pig Latin
pig_latin_mod(words[50])
# Make vector of words
sample_words1 <- c("the", "able", "therefore", "can't", "found.")
# Print original values
sample_words1
# Convert values to modified Pig Latin with punctuation
pig_latin_mod(sample_words1, remove_punctuation = FALSE)
# Convert values to modified Pig Latin without punctuation
pig_latin_mod(sample_words1, remove_punctuation = TRUE)
# Make sample vector of words
sample_words2 <- c("The", "able", "May", "June", "therefore")
# Print original values
sample_words2
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = FALSE)
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = TRUE)
test_that("Output is correct", {
# Check if function output is the same as the manually converted words
expect_equal(pig_latin_mod(words[1:10]), c("yaa", "yaeabl", "yatabou", "yaeabsolut", "yaptacce", "yantaccou", "yaeachiev", "yassacro", "yacta", "yaeactiv"))
})
test_that("Output produces vector error",{
# Create data set in list format for test
data_test2 <- list("the", "and", "therefore", "across", "before")
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test2), "Input data must be an atomic vector.")
})
str_detect(c("1", "a", "b"), pattern = "[a-z, A-Z]")
#' @title Convert words to modified Pig Latin
#'
#' @description pig_latin_mod takes a vector of character data (one word per observation) and converts each observation to a modified version of Pig Latin.
#'
#' @param data An atomic vector. This vector contains the words to be converted to the modified Pig Latin.
#' @param remove_punctuation A Boolean variable. If TRUE, the function removes all punctuation from the data vector. The default is FALSE.
#' @param lower_case A Boolean variable. If TRUE, the function converts all words to lower case. The default is FALSE.
#' @return An atomic vector with the observations from "data" converted to the modified Pig Latin.
#'
#' @import tidyverse
#' @export
pig_latin_mod <- function(data, remove_punctuation = FALSE, lower_case = FALSE){
# Check if input data is an atomic vector
if(!is.atomic(data)){
# If data isn't a vector, stop function with an error
stop("Input data must be an atomic vector.")
}
# Check if the vector has character data
if(!is.character(data)){
# If the vector doesn't have character data, stop function with an error
stop("Input vector must have character data.")
}
# Check if the vector has only alphabetical elements
if(FALSE %in% str_detect(data, pattern = "[a-z, A-Z]")){
# If the vector contains non-alphabetical elements, stop function with an error
stop("Input vector must only contain alphabetical elements.")
}
# Check if the vector multiple words (blank space between characters)
if(TRUE %in% str_detect(data, pattern = " ")){
# If multiple words, stop function with an error
stop("Input vector must only have one word per observation.")
}
# Check if remove_punctuation argument is true
if(remove_punctuation == TRUE){
# Remove punctuation from each word
data <- str_remove_all(data, pattern = "[^a-z,A-Z]")
}
# Check if lower_case argument is true
if(lower_case == TRUE){
# Convert all words to lower case
data <- tolower(data)
}
# Function to detect if a letter is a vowel
is_vowel <- function(x) x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
# Function to detect if a letter is a consonant
is_consonant <- function(x) !(x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U"))
# Map each letter in function
map_vec(data, function(x){
# Split current word by letter
data_letters <- str_split(x, "")[[1]]
# Find letter at the end of the current word
end_letter <- str_sub(x, start=-1)
# Find last vowel index for the current word
last_vowel <- detect_index(data_letters, is_vowel, .dir="backward")
# Find last consonant index for the current word
last_con <- detect_index(data_letters, is_consonant, .dir="backward")
# If the last letter is a consonant
if(is_consonant(end_letter) == TRUE){
# Move letters (until last vowel) from the end to the beginning and add "ya" to the beginning
str_c("ya", str_sub(x, start=last_vowel+1), str_sub(x, end=last_vowel))
} else{
# Move letters (until last consonant) from the end to the beginning and add "ya" to beginning
str_c("ya", str_sub(x, start=last_con+1), str_sub(x, end=last_con))
}
})
}
# Print original values
words[1:20]
# Print values converted into the modified Pig Latin
pig_latin_mod(words[1:20])
# Print original value
words[50]
# Print value converted into the modified Pig Latin
pig_latin_mod(words[50])
# Make vector of words
sample_words1 <- c("the", "able", "therefore", "can't", "found.")
# Print original values
sample_words1
# Convert values to modified Pig Latin with punctuation
pig_latin_mod(sample_words1, remove_punctuation = FALSE)
# Convert values to modified Pig Latin without punctuation
pig_latin_mod(sample_words1, remove_punctuation = TRUE)
# Make sample vector of words
sample_words2 <- c("The", "able", "May", "June", "therefore")
# Print original values
sample_words2
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = FALSE)
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = TRUE)
test_that("Output is correct", {
# Check if function output is the same as the manually converted words
expect_equal(pig_latin_mod(words[1:10]), c("yaa", "yaeabl", "yatabou", "yaeabsolut", "yaptacce", "yantaccou", "yaeachiev", "yassacro", "yacta", "yaeactiv"))
})
test_that("Output produces vector error",{
# Create data set in list format for test
data_test2 <- list("the", "and", "therefore", "across", "before")
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test2), "Input data must be an atomic vector.")
})
test_that("Output produces character error", {
# Create data set with numeric data
})
c(1:5)
class(c(1:5))
test_that("Output produces character error", {
# Create a numeric data set
data_test3 <- c(1:5)
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test3), "Input vector must have character data.")
})
test_that("Output is alphabetical error", {
# Create a data set with some non-alphabetical elements
data_test4 <- c("1", "2", "the", "and", "therefore")
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test4), "Input vector must only contain alphabetical elements.")
})
list("the", "and", "therefore", "across", "before")
test_that("Output is vector error",{
# Create data set in list format for test
data_test2 <- list("the", "and", "therefore", "across", "before")
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test2), "Input data must be an atomic vector.")
})
c(1:5)
test_that("Output is character error", {
# Create a numeric data set
data_test3 <- c(1:5)
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test3), "Input vector must have character data.")
})
c("1", "2", "the", "and", "therefore")
test_that("Output is alphabetical error", {
# Create a data set with some non-alphabetical elements
data_test4 <- c("1", "2", "the", "and", "therefore")
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test4), "Input vector must only contain alphabetical elements.")
})
c("therefore", "and", "before", "and then", "over there")
test_that("Output is multiple word error", {
# Create a data set that contains at least one element with multiple words
data_test5 <- c("therefore", "and", "before", "and then", "over there")
# Check if the function produces the correct error
expect_error(pig_latin_mod(data_test5), "Input vector must only have one word per observation.")
})
test_that("Output does not contain punctuation", {
# Create data set that contains punctuation
data_test6 <- c("can't", "then", "when?", "find", "across", "and.")
# Create data set with converted words without punctuation (to compare with function output)
data_true6 <- c("yantca", "yanthe", "yanwhe", "yandfi", "yassacro", "yanda")
# Check if the function produces the correct output
expect_equal(pig_latin_mod(data_test6, remove_punctuation = TRUE), data_true6)
})
data_test6 <- c("can't", "then", "when?", "find", "across", "and.")
pig_latin_mod(data_test6, remove_punctuation = TRUE)
test_that("Output is lowercase", {
# Create data set that contains capital letters
data_test7 <- c("Therefore", "and", "May", "June", "then", "across")
# Create data set with converted words without capital letters (to compare with function output)
data_true7 <- c("yaetherefor", "yanda", "yayma", "yaejun", "yassacro")
# Check if the function produces the correct output
expect_equal(pig_latin_mod(data_test7, lower_case = TRUE), data_true7)
})
test_that("Output is lowercase", {
# Create data set that contains capital letters
data_test7 <- c("Therefore", "and", "May", "June", "then", "across")
# Create data set with converted words without capital letters (to compare with function output)
data_true7 <- c("yaetherefor", "yanda", "yayma", "yaejun", "yanthe", "yassacro")
# Check if the function produces the correct output
expect_equal(pig_latin_mod(data_test7, lower_case = TRUE), data_true7)
})
c("Therefore", "and", "May", "June", "then", "across")
test_that("Output is lowercase", {
# Create data set that contains capital letters
data_test7 <- c("Therefore", "and", "May", "June", "then", "across")
# Create data set with converted words without capital letters (to compare with function output)
data_true7 <- c("yaetherefor", "yanda", "yayma", "yaejun", "yanthe", "yassacro")
# Check if the function produces the correct output
expect_equal(pig_latin_mod(data_test7, lower_case = TRUE), data_true7)
})
data_test7 <- c("Therefore", "and", "May", "June", "then", "across")
pig_latin_mod(data_test7, lower_case = TRUE)
c("can't", "then", "when?", "find", "across", "and.")
data_test6 <- c("can't", "then", "when?", "find", "across", "and.")
pig_latin_mod(data_test6, remove_punctuation = TRUE)
test_that("Output does not contain punctuation", {
# Create data set that contains punctuation
data_test6 <- c("can't", "then", "when?", "find", "across", "and.")
# Create data set with converted words without punctuation (to compare with function output)
data_true6 <- c("yantca", "yanthe", "yanwhe", "yandfi", "yassacro", "yanda")
# Check if the function produces the correct output
expect_equal(pig_latin_mod(data_test6, remove_punctuation = TRUE), data_true6)
})
test_that("Output is lowercase", {
# Create data set that contains capital letters
data_test7 <- c("Therefore", "and", "May", "June", "then", "across")
# Create data set with converted words without capital letters (to compare with function output)
data_true7 <- c("yaetherefor", "yanda", "yayma", "yaejun", "yanthe", "yassacro")
# Check if the function produces the correct output
expect_equal(pig_latin_mod(data_test7, lower_case = TRUE), data_true7)
})
