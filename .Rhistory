coord_flip()
emma_counts_20 %>%
ggplot(aes(x = words, y = n, fill=words)) +
geom_col() +
coord_flip() +
guides(fill = FALSE)
emma_counts_20 %>%
ggplot(aes(x = words, y = n, fill=words)) +
geom_col() +
coord_flip() +
guides(fill = "none")
emma_counts_20 %>%
ggplot(aes(x = words, y = n, fill=words)) +
geom_col() +
coord_flip() +
guides(fill = "none")
emma_counts_20 %>%
ggplot(aes(x = reorder(words, -n), y = n, fill=words)) +
geom_col() +
coord_flip() +
guides(fill = "none")
# Select the 20 most common words for plotting
emma_counts_20 <- emma_counts[1:20,]
emma_counts_20 %>%
ggplot(aes(x = reorder(words, -n), y = n, fill=words)) +
geom_col() +
coord_flip() +
guides(fill = "none")
emma_counts_20 %>%
ggplot(aes(x = reorder(words, -n), y = n)) +
geom_col() +
coord_flip() +
guides(fill = "none")
emma_counts_20 %>%
ggplot(aes(x = reorder(words, -n), y = n)) +
geom_col(fill = "blue") +
coord_flip() +
guides(fill = "none")
emma_counts_20 %>%
ggplot(aes(x = reorder(words, -n), y = n)) +
geom_col(fill = "#f68060") +
coord_flip() +
guides(fill = "none")
emma_counts_20 %>%
ggplot(aes(x = reorder(words, -n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none")
emma_counts_20$words <- as.factor(emma_counts_20$words)
emma_counts_20 %>%
ggplot(aes(x = reorder(words, -n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none")
emma_counts_20$words <- desc(as.factor(emma_counts_20$words))
emma_counts_20 %>%
ggplot(aes(x = reorder(words, -n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none")
emma_counts_20$words <- as.factor(emma_counts_20$words)
# Plot the 20 most common words
emma_counts_20 %>%
ggplot(aes(x = reorder(words, -n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none")
# Select the 20 most common words for plotting
emma_counts_20 <- emma_counts[1:20,]
emma_counts_20 %>%
ggplot(aes(x = reorder(words, -n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none")
emma_counts_20 %>%
ggplot(aes(x = reorder(words, n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none")
emma_counts_20 %>%
ggplot(aes(x = reorder(words, n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none") +
geom_text(size = 3, position = position_stack(vjust = 0.5))
emma_counts_20 %>%
ggplot(aes(x = reorder(words, n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none")
emma_counts_20 %>%
ggplot(aes(x = reorder(words, n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none") +
geom_text(aes(label=n))
emma_counts_20 %>%
ggplot(aes(x = reorder(words, n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none") +
geom_text(aes(label=n), position = position_stack(vjust = 0.5))
emma_counts_20 %>%
ggplot(aes(x = reorder(words, n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none") +
geom_text(aes(label=n), hjust = 1.2)
emma_counts_20 %>%
ggplot(aes(x = reorder(words, n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none") +
geom_text(aes(label=n), hjust = 1.2, colour="white")
emma_counts_20 %>%
ggplot(aes(x = reorder(words, n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none") +
geom_text(aes(label=n), hjust = 1.2, colour="white") +
ggtitle("20 Most Common Words in Emma") +
xlab("Word Count") +
ylab("Words")
emma_counts_20 %>%
ggplot(aes(x = reorder(words, n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none") +
geom_text(aes(label=n), hjust = 1.2, colour="white") +
ggtitle("20 Most Common Words in Emma") +
xlab("Words") +
ylab("Word Count")
knitr::opts_chunk$set(echo = TRUE)
# Load packages
library(tidyverse)
library(janeaustenr)
library(stopwords)
# Create lowercase subset of "emma" data set without stop punctuation and blank entries
emma_subset <- emma %>%
str_split(pattern=" ") %>%
unlist() %>%
tolower() %>%
str_subset(pattern="") %>%
str_remove_all(pattern="[.:;,?()_!&]") %>%
str_remove_all(pattern="\"") %>%
str_remove_all(pattern="--")
# Subset "emma" further without stopwords (from "stopwords" package)
emma_subset <- emma_subset[(emma_subset %in% stopwords()) == FALSE]
# Make "emma_subset" into a data frame
emma_subset_df <- data.frame("words" = emma_subset)
# Summarize counts of words and order largest to smallest
emma_counts <- emma_subset_df %>%
count(words) %>%
arrange(desc(n))
# Select the 20 most common words for plotting
emma_counts_20 <- emma_counts[1:20,]
# Plot the 20 most common words
emma_counts_20 %>%
ggplot(aes(x = reorder(words, n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none") +
geom_text(aes(label=n), hjust = 1.2, colour="white") +
ggtitle("20 Most Common Words in Emma") +
xlab("Words") +
ylab("Word Count")
is.character(c("a", "b", "c"))
is.vector(c("a", "b", "c"))
is.character(c(1,2,3))
is.character(c(1,"a","b"))
c(1,"a", "b")
words
str_detect(words,[aeiouAEIOU])
str_detect(words,pattern=[aeiouAEIOU])
str_detect(words,pattern="[aeiouAEIOU]")
str_view(words, pattern="[aeiouAEIOU]")
words %>%
str_split(pattern="[aeiouAEIOU]")
words[1:3] %>%
str_split(pattern="[aeiouAEIOU]")
str_sub(words, end=1)
str_sub(words, end=-1)
words[-1]
str_sub(words[1:10], start=-1, end=-1)
detect(words[1:10], [aeiouAEIOU])
detect(words[1:10], "[aeiouAEIOU]")
is_vowel <- function(x) x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
is_vowel("a")
is_vowel("A")
is_vowel("p")
detect(words[1:10], is_vowel)
detect_index(words[1:10], is_vowel)
map(words[1:10], function(x) detect_index(x, is_vowel))
data_letters <- str_split(words[1:10], "")
data_letters
detect_index(data_letters, is_vowel)
#detect_index(data_letters, is_vowel)
map(data_letters, function(x) detect_index(x, is_vowel))
#detect_index(data_letters, is_vowel)
map(data_letters, function(x) detect_index(x, is_vowel, .dir="backward"))
last_vowel_index <- map_vec(data_letters, function(x) detect_index(x, is_vowel, .dir="backward"))
last_vowel_index
# Split words at final vowel
str_sub(words[1:10], start=last_vowel_index)
# Split words at final vowel
str_sub(words[1:10], end=last_vowel_index)
# Split words at final vowel
str_sub(words[1:10], end=last_vowel_index-1)
str_c(str_sub(words[1:10], end=last_vowel_index),str_sub(words[1:10], end=last_vowel_index-1))
str_c(str_sub(words[1:10], start=last_vowel_index),str_sub(words[1:10], end=last_vowel_index-1))
is_consanant <- function(x) x %in% !c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
is_consanant("a")
is_consanant <- function(x) !(x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U"))
is_consanant("a")
"F"
is_consanant("x")
last_con_index <- map_vec(data_letters, function(x) detect_index(x, is_consanant, .dir="backward"))
last_con_index
last_vowel_index
knitr::opts_chunk$set(echo = TRUE)
# Load packages
library(tidyverse)
library(janeaustenr)
library(stopwords)
# Create lowercase subset of "emma" data set without stop punctuation and blank entries
emma_subset <- emma %>%
str_split(pattern=" ") %>%
unlist() %>%
tolower() %>%
str_subset(pattern="") %>%
str_remove_all(pattern="[.:;,?()_!&]") %>%
str_remove_all(pattern="\"") %>%
str_remove_all(pattern="--")
# Subset "emma" further without stopwords (from "stopwords" package)
emma_subset <- emma_subset[(emma_subset %in% stopwords()) == FALSE]
# Make "emma_subset" into a data frame
emma_subset_df <- data.frame("words" = emma_subset)
# Summarize counts of words and order largest to smallest
emma_counts <- emma_subset_df %>%
count(words) %>%
arrange(desc(n))
# Select the 20 most common words for plotting
emma_counts_20 <- emma_counts[1:20,]
# Plot the 20 most common words
emma_counts_20 %>%
ggplot(aes(x = reorder(words, n), y = n)) +
geom_col(fill = "darksalmon") +
coord_flip() +
guides(fill = "none") +
geom_text(aes(label=n), hjust = 1.2, colour="white") +
ggtitle("20 Most Common Words in Emma") +
xlab("Words") +
ylab("Word Count")
#' @title Convert words to modified Pig Latin
#'
#' @description pig_latin_mod takes a vector of character data (one word per observation) and converts each observation to a modified version of Pig Latin.
#'
#' @param data An atomic vector.
#' @return An atomic vector with the observations from "data" converted to the modified Pig Latin.
#'
#' @import tidyverse
#' @export
pig_latin_mod <- function(data){
# Check if input data is a vector
if(!is.vector(data)){
# If data isn't a vector, stop function with an error
stop("Input data must be a vector.")
}
# Check if the vector has character data
if(!is.character(data)){
# If the vector doesn't have character data, stop function with an error
stop("Input vector must have character data.")
}
# Function to detect if a letter is a vowel
is_vowel <- function(x) x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
# Function to detect if a letter is a consonant
is_consonant <- function(x) !(x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U"))
# Map each letter in function
map_vec(data, function(x){
# Split current word by letter
data_letters <- str_split(x, "")[[1]]
# Find letter at the end of the current word
end_letter <- str_sub(x, start=-1)
# Find last vowel index for the current word
last_vowel <- detect_index(data_letters, is_vowel, .dir="backward")
# Find last consonant index for the current word
last_con <- detect_index(data_letters, is_consonant, .dir="backward")
# If the last letter is a consonant
if(is_consonant(end_letter) == TRUE){
# Move letters (until last vowel) from the end to the beginning and add "ya" to the beginning
str_c("ya", str_sub(x, start=last_vowel+1), str_sub(x, end=last_vowel))
} else{
# Move letters (until last consonant) from the end to the beginning and add "ya" to beginning
str_c("ya", str_sub(x, start=last_con+1), str_sub(x, end=last_con))
}
})
}
# Convert first 20 words from "words" data set into the modified Pig Latin
pig_latin_mod(words[1:20])
# Print original values
words[1:20]
# Print values converted into the modified Pig Latin
pig_latin_mod(words[1:20])
# Print original value
words[1]
# Print value converted into the modified Pig Latin
pig_latin_mod(words[1])
# Print original value
words[50]
# Print value converted into the modified Pig Latin
pig_latin_mod(words[50])
class(words)
is.vector(words)
is.na(c("1", "2", NA))
#' @title Convert words to modified Pig Latin
#'
#' @description pig_latin_mod takes a vector of character data (one word per observation) and converts each observation to a modified version of Pig Latin.
#'
#' @param data An atomic vector.
#' @return An atomic vector with the observations from "data" converted to the modified Pig Latin.
#'
#' @import tidyverse
#' @export
pig_latin_mod <- function(data, remove_punctuation = FALSE, lower_case = FALSE){
# Check if input data is a vector
if(!is.vector(data)){
# If data isn't a vector, stop function with an error
stop("Input data must be a vector.")
}
# Check if the vector has character data
if(!is.character(data)){
# If the vector doesn't have character data, stop function with an error
stop("Input vector must have character data.")
}
# Check if remove_punctuation argument is true
if(remove_punctuation == TRUE){
# Remove punctuation from each word
data <- str_remove_all(data, pattern = "[^a-z,A-Z]")
}
# Check if lower_case argument is true
if(lower_case == TRUE){
# Convert all words to lower case
data <- tolower(data)
}
# Function to detect if a letter is a vowel
is_vowel <- function(x) x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
# Function to detect if a letter is a consonant
is_consonant <- function(x) !(x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U"))
# Map each letter in function
map_vec(data, function(x){
# Split current word by letter
data_letters <- str_split(x, "")[[1]]
# Find letter at the end of the current word
end_letter <- str_sub(x, start=-1)
# Find last vowel index for the current word
last_vowel <- detect_index(data_letters, is_vowel, .dir="backward")
# Find last consonant index for the current word
last_con <- detect_index(data_letters, is_consonant, .dir="backward")
# If the last letter is a consonant
if(is_consonant(end_letter) == TRUE){
# Move letters (until last vowel) from the end to the beginning and add "ya" to the beginning
str_c("ya", str_sub(x, start=last_vowel+1), str_sub(x, end=last_vowel))
} else{
# Move letters (until last consonant) from the end to the beginning and add "ya" to beginning
str_c("ya", str_sub(x, start=last_con+1), str_sub(x, end=last_con))
}
})
}
# Print original values
words[1:20]
# Print values converted into the modified Pig Latin
pig_latin_mod(words[1:20])
# Make vector of words
sample_words <- c("the", "able", "therefore", "can't", "mr.")
# Print original values
sample_words
# Make vector of words
sample_words <- c("the", "able", "therefore", "can't", "mr.")
# Print original values
sample_words
# Convert values to modified Pig Latin without punctuation
pig_latin_mod(sample_words)
# Make vector of words
sample_words <- c("the", "able", "therefore", "can't", "found.")
# Print original values
sample_words
# Convert values to modified Pig Latin without punctuation
pig_latin_mod(sample_words)
# Make vector of words
sample_words <- c("the", "able", "therefore", "can't", "found.")
# Print original values
sample_words
# Convert values to modified Pig Latin without punctuation
pig_latin_mod(sample_words, remove_punctuation = TRUE)
# Make vector of words
sample_words <- c("the", "able", "therefore", "can't", "found.")
# Print original values
sample_words
# Convert values to modified Pig Latin with punctuation
pig_latin_mod(sample_words, remove_punctuation = FALSE)
# Convert values to modified Pig Latin without punctuation
pig_latin_mod(sample_words, remove_punctuation = TRUE)
# Make vector of words
sample_words1 <- c("the", "able", "therefore", "can't", "found.")
# Print original values
sample_words1
# Convert values to modified Pig Latin with punctuation
pig_latin_mod(sample_words1, remove_punctuation = FALSE)
# Convert values to modified Pig Latin without punctuation
pig_latin_mod(sample_words1, remove_punctuation = TRUE)
# Make sample vector of words
sample_words2 <- c("The", "able", "May", "June", "therefore")
# Print original values
sample_words2
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = FALSE)
# Make sample vector of words
sample_words2 <- c("The", "able", "May", "June", "therefore")
# Print original values
sample_words2
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = FALSE)
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = TRUE)
str_view(c("the", "and", "and then"), pattern = " ")
str_detect(c("the", "and", "and then"), pattern = " ")
#' @title Convert words to modified Pig Latin
#'
#' @description pig_latin_mod takes a vector of character data (one word per observation) and converts each observation to a modified version of Pig Latin.
#'
#' @param data An atomic vector. This vector contains the words to be converted to the modified Pig Latin.
#' @param remove_punctuation A Boolean variable. If TRUE, the function removes all punctuation from the data vector. The default is FALSE.
#' @param lower_case A Boolean variable. If TRUE, the function converts all words to lower case. The default is FALSE.
#' @return An atomic vector with the observations from "data" converted to the modified Pig Latin.
#'
#' @import tidyverse
#' @export
pig_latin_mod <- function(data, remove_punctuation = FALSE, lower_case = FALSE){
# Check if input data is a vector
if(!is.vector(data)){
# If data isn't a vector, stop function with an error
stop("Input data must be a vector.")
}
# Check if the vector has character data
if(!is.character(data)){
# If the vector doesn't have character data, stop function with an error
stop("Input vector must have character data.")
}
# Check if the vector multiple words (blank space between characters)
if(TRUE %in% str_detect(data, pattern = " ")){
# If multiple words, stop function with an error
stop("Input vector must only have one word per observation.")
}
# Check if remove_punctuation argument is true
if(remove_punctuation == TRUE){
# Remove punctuation from each word
data <- str_remove_all(data, pattern = "[^a-z,A-Z]")
}
# Check if lower_case argument is true
if(lower_case == TRUE){
# Convert all words to lower case
data <- tolower(data)
}
# Function to detect if a letter is a vowel
is_vowel <- function(x) x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
# Function to detect if a letter is a consonant
is_consonant <- function(x) !(x %in% c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U"))
# Map each letter in function
map_vec(data, function(x){
# Split current word by letter
data_letters <- str_split(x, "")[[1]]
# Find letter at the end of the current word
end_letter <- str_sub(x, start=-1)
# Find last vowel index for the current word
last_vowel <- detect_index(data_letters, is_vowel, .dir="backward")
# Find last consonant index for the current word
last_con <- detect_index(data_letters, is_consonant, .dir="backward")
# If the last letter is a consonant
if(is_consonant(end_letter) == TRUE){
# Move letters (until last vowel) from the end to the beginning and add "ya" to the beginning
str_c("ya", str_sub(x, start=last_vowel+1), str_sub(x, end=last_vowel))
} else{
# Move letters (until last consonant) from the end to the beginning and add "ya" to beginning
str_c("ya", str_sub(x, start=last_con+1), str_sub(x, end=last_con))
}
})
}
# Print original values
words[1:20]
# Print values converted into the modified Pig Latin
pig_latin_mod(words[1:20])
# Print original value
words[50]
# Print value converted into the modified Pig Latin
pig_latin_mod(words[50])
# Make vector of words
sample_words1 <- c("the", "able", "therefore", "can't", "found.")
# Print original values
sample_words1
# Convert values to modified Pig Latin with punctuation
pig_latin_mod(sample_words1, remove_punctuation = FALSE)
# Convert values to modified Pig Latin without punctuation
pig_latin_mod(sample_words1, remove_punctuation = TRUE)
# Make sample vector of words
sample_words2 <- c("The", "able", "May", "June", "therefore")
# Print original values
sample_words2
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = FALSE)
# Convert values to modified Pig Latin with capital letters
pig_latin_mod(sample_words2, lower_case = TRUE)
pig_latin_mod(c("then", "and", "and then"))
